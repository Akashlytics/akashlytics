import { isProd } from "@src/shared/constants";
import { sleep } from "@src/shared/utils/delay";

const fetch = require("node-fetch");

const rpcEndpoints = ["http://akash-node.akashlytics.com:26657"];
const fallbackEndpoint = "https://rpc.akash.forbole.com";
const failedTxs = [
  "9B856CA2F17B85899250911743278269043FDEDDEFAE6395599D42A1464A4EFB",
  "7D5C19564D1F55ACA9A79A60385E558E808D09F534FBB8A666ABDBA0AD51B972",
  "53987A996B82ACFB6C4C618C99409488C93D696B91F60D8BAEDC8615B027FB05",
  "27B366E2EB08F20E7D7FBA3C581643BB288D6153CB5062948C0A7112223471E5",
  "C737E7144D65EB538A83AF226B3E0B991F21D3D7F91D64A40FE05F043A252287",
  "97AA261784D933F08A9A702EFEAF4558340FCEA971285B932C503B43DBFDFDD1",
  "E5688D4C12FA3AFC2559A049300EB903A2B3322C8D3EEC0A6C83120155F02BD3",
  "25C7F370E2B69E98D66D928A3527A347422C5306F1FD502271CBD3F8AF58B572",
  "4DE00583353801D06A334620F7E4E1814566A3AE797927BC349F8A05A3A4A237",
  "EE3D75E5E675E6D9029B112D0424B6322FA751B34AA51AF2096CF15B876FFD86",
  "399C7C6FC12252371A485B00B07FF46A565D15602CA4A32B25F8C8C1BB13D643",
  "3C3B3BF4DC1BE38A3971C61C43E9B1B727626DD82C4A8B77667FC30010F59A38",
  "6ED74EC71010973BAD8FDEBE0BF87DBDA4B9B0F10221059469B6757A8845F918",
  "5507669E0DD8BFA564F2E9EB94950FA35A8BB3B27A371F05FFDB9FB60DE7B5CE",
  "DC62DED9700B3100B4D51B35441FF803F2AA2140389C109D3B5BDC125F250960",
  "82AEE2ACFBFB84E0431891EAF33DEBC114C164B2D3F843F4AECC3AEAB9C019F9",
  "388AC4E2C9B29CC16C7FC3F4638F3A16887601449266E25BDF4DFF77FE581BB1",
  "048C147519B46B81A9306B16D21587EB9405E5D9C9A4619B79E874CF5AF52148",
  "43B17F4BA16C22F114C1E57E7EE7D63B5141BACF6748F5816D29F180D660D798",
  "7D4FB474737EDA78D83B7B8F369E862F16B288D5A49C7DAD7B1714F6AD7CFEB9",
  "B0D1FCE19F342C76BF52295D5F1BF2FE7929DDD7B0254FCC5E7C4D3AEF7A5808",
  "6111D88A91D8764CD75390CF25A9B2F8A39E7092D9194EA82170B90D31C24AAC",
  "3D2D35944D13DCD73D5941283E1DA7573F9E5B4E74EA6A7B3C36FC18D94C2C50",
  "62A9A54CBA2A0C99C437AA95E279A3C6C96E9EA7E60484C8058BB38AF3BFC84D",
  "3BA1AA74D283F79877F5C67F4653D28200915DBD8E84E3BC016099FE245D994F",
  "52E1A575B2E5728CE9EA6F88A5308C112B46738EDB816D8121699178BD5BD5C3",
  "74F5582B4CB74742EAF41B883176D337F96CCC5E53B8871ED971B0C20FCE4AA1",
  "2AD633F55D16435A1FF80D64BBDAA52F0E22874BBE026D8CDD4ED3C50558DE63",
  "714D65AC7C45CD3B23130570F4BA7AD69E6B7127444A4FA8320A29B1EEC90442",
  "38ABBFD366ACB0632A92FF106D5825073794908CB5224BCEFC67D73A24A2CFFD",
  "5E0C74B6DB99A3FE8CF128A3156D671D2402B931109340C2F045C9F393E8AE59",
  "77E430893AF5004A87358DAC2B3D77A180136CCD7DE9351FCE758919B93FE1EE",
  "1BC812449078949EBC915253DA9C2DC6B40D050E5051745995D677C756CA7308",
  "DA55DDB21D7B9C0C0087A3D4126BB23A9C311178F55490795EAC963CBF3577D1",
  "17616839D6B818B865B6C9DCE38FDF3F1AEDC6B777A10C917A510DA1AECAD40E",
  "D9E620DB4F57B35F72399DD7856B8CCF4330F6E729BAB440DA09893AD36CB1C2",
  "BBC0D21D8C8E06E11E2BD18383245A587BEAA686FF109DE8C5B41022568C6624",
  "D07BE4917D51674E9F858CAC02B4D57C37B3624840A550419BBDB741C8117F73",
  "F220FC56D1E96F77D2E92AAEB95F810532935FA238853994A3BB920631073596",
  "6A3B2F5653C842D4B3FA3020DCE714202401CF5BA2B7ACC5CD7C848C309F94CE",
  "4E3890ADB4F81865082E55535EC14ABB150B7C3F7D27EACA5DF6290E3828A9BD",
  "B55FABAAA90688F924CA14D4BA2B7B6D254B157D240FD3030F8EB94D54BD053E",
  "1978CCFDD59160D31633B688EC504159284AA27E2CA741A2068FA8E9FA3617CB",
  "B24C8D2D8E77683B2C742DFED7D457240C7F75BD6E387B1A7FE18DAA374542AA",
  "8916BB2CDAFDF8EB7CA2E8CB04328162D2D31C1FA9C8B94A39FC09AE915A605F",
  "95DA5FA7BAB3D32781A1E5FC08C660B18EBA0B261CC478A4CD9BF944E16E7DDF"
];

export function createNodeAccessor() {
  let maxConcurrentQueries = isProd ? 5 : 10;
  let nodeClients = rpcEndpoints.map((x) => createEndpointAccessor(x, maxConcurrentQueries));

  return {
    waitForAllFinished: async () => {
      while (nodeClients.some((x) => x.pendingQueries().length > 0)) {
        await sleep(5);
      }
    },
    waitForAvailableNode: async () => {
      while (!nodeClients.some((x) => x.isAvailable())) {
        await sleep(5);
      }
    },
    fetch: async (url: string, callback?) => {
      const node = nodeClients.find((x) => x.isAvailable());
      return node.fetch(url, callback);
    },
    displayTable: () => {
      console.table(
        nodeClients.map((x) => ({
          endpoint: x.endpoint,
          fetching: x
            .pendingQueries()
            .map((x) => (x.startsWith("/block") ? x.replace("/block?height=", "") : x.substring(63)))
            .join(","),
          fetched: x.count(),
          errors: x.errorCount()
        }))
      );
    }
  };
}

function createEndpointAccessor(endpoint, maxConcurrentQueries) {
  let pendingQueries = [];
  let count = 0;
  let errorCount = 0;

  return {
    endpoint: endpoint,
    pendingQueries: () => pendingQueries,
    count: () => count,
    errorCount: () => errorCount,
    isAvailable: () => {
      return pendingQueries.length < maxConcurrentQueries;
    },
    fetch: async (url, callback) => {
      pendingQueries.push(url);

      try {
        const needFallback = failedTxs.some((x) => url.includes(x));
        const fullUrl = (needFallback ? fallbackEndpoint : endpoint) + url;

        const response = await fetch(fullUrl);

        if (response.status === 200) {
          count++;
          const json = await response.json();

          if (callback) {
            await callback(json);
          }
          await sleep(Math.random() * 400 + 100);

          return json;
        } else {
          throw response;
        }
      } catch (err) {
        errorCount++;
        throw err;
      } finally {
        pendingQueries = pendingQueries.filter((x) => x !== url);
      }
    }
  };
}
